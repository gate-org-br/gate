/* global customElements, template */

import resolve from './resolve.js';

function isVisible(element)
{
	const rect = element.getBoundingClientRect();
	return rect.top >= 0 &&
		rect.left >= 0 &&
		rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
		rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}

export default class GContextMenu extends HTMLElement
{
	#context;

	constructor()
	{
		super();
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		this.addEventListener("mouseleave", () => this.hide());
	}

	set context(context)
	{
		this.#context = context;
	}

	get context()
	{
		return this.#context;
	}

	set actions(actions)
	{
		actions.forEach(({icon, text, color, method, action, target, title, visible}) =>
		{
			if (visible && !visible(this.context))
				return;

			let link = this.shadowRoot.appendChild(document.createElement("a"));
			link.style.color = color;
			link.title = title || null;
			link.appendChild(document.createElement("label")).innerText = text;
			link.setAttribute("data-icon", String.fromCharCode(icon ? parseInt(icon, 16) : 0x1024));
			if (typeof action === 'string')
			{
				link.target = target || "_self";
				link.href = resolve(link, this.context, action);
				if (method)
					link.setAttribute("data-method", method);
				link.addEventListener("click", () => setTimeout(() => this.hide(), 0));
			} else if (typeof action === 'function')
			{
				link.addEventListener("click", event =>
				{
					event.preventDefault();
					event.stopPropagation();
					action(this.#context);
					this.root().hide();
				});
			} else if (Array.isArray(action))
			{
				link.setAttribute("submenu", "");
				link.addEventListener('mouseenter', () =>
				{
					const submenu = document.createElement('g-context-menu');
					link.addEventListener('mouseleave', () => submenu.hide(), {once: true});
					submenu.actions = action;
					link.appendChild(submenu);

					const rect = link.getBoundingClientRect();
					submenu.style.top = `${rect.top}px`;
					submenu.style.left = `${rect.right}px`;
					if (!isVisible(submenu))
					{
						submenu.style.left = `${rect.left - submenu.clientWidth}px`;
						if (!isVisible(submenu))
						{
							submenu.style.top = `${rect.bottom - submenu.clientHeight}px`;
							submenu.style.left = `${rect.right}px`;
							if (!isVisible(submenu))
								submenu.style.left = `${rect.left - submenu.clientWidth}px`;
						}
					}
				});
		}

		});
	}

	show(x, y)
	{
		document.body.appendChild(this);

		this.style.top = `${y - 1}px`;
		this.style.left = `${x - 1}px`;
		if (!isVisible(this))
		{
			this.style.top = `${y + 1 - this.clientHeight}px`;
			this.style.left = `${x - 1}px`;
			if (!isVisible(this))
			{
				this.style.left = `${x + 1 - this.clientWidth}px`;
				this.style.top = `${y - 1}px`;
				if (!isVisible(this))
				{
					this.style.left = `${x + 1 - this.clientWidth}px`;
					this.style.top = `${y + 1 - this.clientHeight}px`;
				}
			}
		}
	}

	root()
	{
		return this.getRootNode().host
			instanceof GContextMenu
			? this.getRootNode().host.root()
			: this;
	}
	hide()
	{
		this.remove();
	}

	static show(context, x, y, ...actions)
	{
		let menu = document.createElement("g-context-menu");
		menu.context = context;
		menu.actions = actions;
		menu.show(x, y);
		return menu;
	}
}

customElements.define('g-context-menu', GContextMenu);

window.addEventListener("contextmenu", event =>
{
	if (event.ctrlKey)
		return;

	let element = event.target.closest("[data-contextmenu], [data-contextmenu-module]");
	if (!element)
		return;

	event.preventDefault();
	if (element.hasAttribute("data-contextmenu"))
		fetch(element.getAttribute("data-contextmenu"))
			.then(e => e.json())
			.then(e => GContextMenu.show(element, event.x, event.y, ...e))
			.catch(error => alert(error));
	else
		import(element.getAttribute("data-contextmenu-module"))
			.then(module => module.default)
			.then(e => GContextMenu.show(element, event.x, event.y, ...e))
			.catch(error => alert(error));
});