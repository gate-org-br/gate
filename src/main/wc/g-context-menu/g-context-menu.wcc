/* global customElements, template */

function isVisible(element)
{
	let rect = element.getBoundingClientRect();
	return rect.top >= 0
		&& rect.left >= 0
		&& rect.bottom <= window.innerHeight
		&& rect.right <= window.innerWidth;
}

export default class GContextMenu extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		this.addEventListener("click", () => this.hide());
		this.addEventListener("mouseleave", () => this.hide())
	}

	set actions(actions)
	{
		actions.forEach(action =>
		{
			let link = this.shadowRoot.appendChild(document.createElement("a"));
			link.innerText = action.text;
			link.appendChild(document.createElement("g-icon")).innerHTML = `&#X${action.icon || '1024'};`;
			if (typeof action.action === 'string')
				link.href = action.action;
			else
				link.addEventListener("click", () => action.action());
		});
	}

	show(x, y)
	{
		this.style.top = (y - 1) + "px";
		this.style.left = (x - 1) + "px";
		document.documentElement.appendChild(this);

		if (isVisible(this))
			return;

		this.style.top = (y + 1 - this.clientHeight) + "px";
		this.style.left = (x - 1) + "px";

		if (isVisible(this))
			return;

		this.style.left = (x + 1 - this.clientWidth) + "px";
		this.style.top = y - 1 + "px";

		if (isVisible(this))
			return;

		this.style.left = (x + 1 - this.clientWidth) + "px";
		this.style.top = (y + 1 - this.clientHeight) + "px";
	}

	hide()
	{
		this.remove();
	}

	static show(x, y, ...actions)
	{
		let menu = document.createElement("g-context-menu");
		menu.actions = actions;
		menu.show(x, y);
	}
}

customElements.define('g-context-menu', GContextMenu);