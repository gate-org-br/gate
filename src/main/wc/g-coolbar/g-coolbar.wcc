/* global customElements */

function visible(element, container)
{
	element = element.getBoundingClientRect();
	container = container.getBoundingClientRect();
	return 	element.top >= container.top &&
		element.left >= container.left &&
		element.bottom <= container.bottom &&
		element.right <= container.right;
}

function scroll(coolbar, first, next, inline)
{
	let div = coolbar.shadowRoot.querySelector("div");
	for (let element = first; element; element = next(element))
		if (element.tagName === "A"
			|| element.tagName === "BUTTON"
			|| element.classList.contains(".g-command"))
			if (visible(element, div))
				for (element = next(element); element; element = next(element))
					if (!visible(element, div))
						return element.scrollIntoView({inline, behavior: "smooth"});
}

customElements.define("g-coolbar", class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: 'open'});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let div = this.shadowRoot.querySelector("div");
		let next = this.shadowRoot.querySelector("#next");
		let prev = this.shadowRoot.querySelector("#prev");

		this.shadowRoot.querySelector("#next").addEventListener("click", () =>
		{
			if (this.hasAttribute("reverse"))
				scroll(this, this.firstElementChild, e => e.nextElementSibling, "start");
			else
				scroll(this, this.lastElementChild, e => e.previousElementSibling, "start");
		});

		this.shadowRoot.querySelector("#prev").addEventListener("click", () =>
		{
			if (this.hasAttribute("reverse"))
				scroll(this, this.lastElementChild, e => e.previousElementSibling, "end");
			else
				scroll(this, this.firstElementChild, e => e.nextElementSibling, "end");
		});

		div.addEventListener("scroll", () => this.update());
		new ResizeObserver(() => this.update()).observe(this);
	}

	get disabled()
	{
		return this.hasAttribute("disabled");
	}

	set disabled(value)
	{
		if (value)
			this.setAttribute("disabled", "");
		else
			this.removeAttribute("disabled");
	}

	connectedCallback()
	{
		this.update();
	}

	update()
	{
		let div = this.shadowRoot.querySelector("div");
		let next = this.shadowRoot.querySelector("#next");
		let prev = this.shadowRoot.querySelector("#prev");

		if (this.hasAttribute("reverse"))
		{
			prev.style.display = visible(this.firstElementChild, div) ? "none" : "flex";
			next.style.display = visible(this.lastElementChild, div) ? "none" : "flex";
		} else
		{
			next.style.display = visible(this.firstElementChild, div) ? "none" : "flex";
			prev.style.display = visible(this.lastElementChild, div) ? "none" : "flex";
		}
	}
});

