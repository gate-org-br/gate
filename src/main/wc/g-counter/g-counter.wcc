/* global customElements */

import DOM from './dom.js';

customElements.define('g-counter', class extends HTMLElement
{
	#observer;

	constructor()
	{
		super();
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		this.#observer = new MutationObserver(mutations => this.connectedCallback());
	}

	get target()
	{
		return this.getAttribute("target") || "this.0";
	}

	set target(target)
	{
		return this.setAttribute("target", target);
	}

	get value()
	{
		return this.getAttribute("value");
	}

	set value(value)
	{
		this.setAttribute("value", value);
	}

	connectedCallback()
	{
		const count = DOM.navigate(this, this.target)
			.orElseThrow("Invalid counter target")
			.children.length;
		this.value = count;
		this.querySelectorAll("g-counter-value").forEach(e => e.innerText = count);
	}

	attributeChangedCallback()
	{
		this.#observer.disconnect();
		let target = DOM.navigate(this, this.target)
			.orElseThrow("Invalid counter target");
		this.#observer.observe(target, {childList: true, subtree: true});
	}

	static get observedAttributes()
	{
		return ['target'];
	}
});

customElements.define('g-counter-value', class extends HTMLElement
{
});

