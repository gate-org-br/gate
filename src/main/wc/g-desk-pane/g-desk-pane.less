g-desk-pane
{
	margin: 0;
	padding: 0;
	width: 100%;
	color: black;
	display: flex;
	flex-wrap: wrap;
	align-items: flex-start;
	justify-content: flex-start;
	background-color: transparent;

	g-desk-pane
	:is(g-desk-pane, a, button, hr)
		{
		display: none;
	}

	> hr {
		border: solid 4px #BBBBBB;
		flex-basis: calc(100% - 8px);

		&:first-child,
			&:last-child, & + hr {
			display: none
		}
	}

	> :is(g-desk-pane, a, button) {
		margin: 4px;
		padding: 8px;
		display: flex;
		color: inherit;
		cursor: pointer;
		border-radius: 5px;
		align-items: center;
		font-weight: inherit;
		border: 2px solid white;
		justify-content: flex-start;
		background-image: linear-gradient(to bottom, #FDFAE9, #B3B0A4);

		> i {
			order: -1;
			width: 48px;
			height: 48px;
			display: flex;
			color: inherit;
			font-size: 40px;
			margin-right: 8px;
			align-items: center;
			justify-content: center
		}

		> img {
			width: 48px;
			height: 48px;
			order: -1;
			margin-right: 8px;
		}

		flex-basis: calc(100% - 8px);
		@media only screen and (min-width: 992px) {
			flex-basis: calc(50% - 8px)
		}
		@media only screen and (min-width: 1200px) {
			flex-basis: calc(25% - 8px)
		}

		&[data-size='1'], &[x1]
		{
			@media only screen and (min-width: 768px) {
				flex-basis: calc(50% - 8px)
			}
			@media only screen and (min-width: 992px) {
				flex-basis: calc(25% - 8px)
			}
			@media only screen and (min-width: 1200px) {
				flex-basis: calc(12.5% - 8px)
			}
		}

		&[data-size='2'], &[x2]
		{
			@media only screen and (min-width: 992px) {
				flex-basis: calc(50% - 8px)
			}
			@media only screen and (min-width: 1200px) {
				flex-basis: calc(25% - 8px)
			}
		}

		&[data-size='4'], &[x4]
		{
			@media only screen and (min-width: 1200px) {
				flex-basis: calc(50% - 8px)
			}
		}

		&[data-size='8'], &[x8]
		{
			flex-basis: calc(100% - 8px);
		}

		&:hover {
			border-color: #FFFACD;
			background-image: linear-gradient(to bottom, #EDE9D9, #BDBAAD);
		}
	}
}

ul.DeskPane
{
	margin: 0;
	padding: 0;
	width: 100%;
	display: flex;
	flex-wrap: wrap;
	align-items: flex-start;
	justify-content: flex-start;
	background-color: transparent;

	a {
		color: black;
	}

	ul {
		display: none;
		margin: 0;
		padding: 0
	}

	> li {
		margin: 4px;
		display: flex;
		cursor: pointer;
		flex-basis: 100%;
		border-radius: 5px;
		align-items: stretch;
		list-style-type: none;
		align-content: stretch;
		justify-content: center;
		border: 2px solid white;
		background-image: linear-gradient(to bottom, #FDFAE9, #B3B0A4);

		flex-basis: calc(100% - 8px);
		@media only screen and (min-width: 992px) {
			flex-basis: calc(50% - 8px)
		}
		@media only screen and (min-width: 1200px) {
			flex-basis: calc(25% - 8px)
		}

		&[data-size='1'], &[x1]
		{
			@media only screen and (min-width: 768px) {
				flex-basis: calc(50% - 8px)
			}
			@media only screen and (min-width: 992px) {
				flex-basis: calc(25% - 8px)
			}
			@media only screen and (min-width: 1200px) {
				flex-basis: calc(12.5% - 8px)
			}
		}

		&[data-size='2'], &[x2]
		{
			@media only screen and (min-width: 992px) {
				flex-basis: calc(50% - 8px)
			}
			@media only screen and (min-width: 1200px) {
				flex-basis: calc(25% - 8px)
			}
		}

		&[data-size='4'], &[x4]
		{
			@media only screen and (min-width: 1200px) {
				flex-basis: calc(50% - 8px)
			}
		}

		&[data-size='8'], &[x8]
		{
			flex-basis: calc(100% - 8px);
		}

		&:hover {
			border-color: #FFFACD;
			background-image: linear-gradient(to bottom, #EDE9D9, #BDBAAD);
		}

		> a,
		> button {
			padding: 8px;
			height: 100%;
			flex-grow: 1;
			display: flex;
			color: inherit;
			cursor: inherit;
			text-align: center;
			align-items: center;
			font-weight: inherit;
			align-content: stretch;
			justify-content: flex-start;

			> i {
				order: -1;
				width: 48px;
				height: 48px;
				display: flex;
				color: inherit;
				font-size: 40px;
				margin-right: 8px;
				align-items: center;
				justify-content: center
			}

			> img {
				width: 48px;
				height: 48px;
				order: -1;
				margin-right: 8px;
			}

			&[data-disabled]{
				color: var(--r);
				cursor: not-allowed;
			}
		}
	}



	> li.Reset
	{
		color: var(--g);
		> a {
			font-size: 20px
		}
	}
}
