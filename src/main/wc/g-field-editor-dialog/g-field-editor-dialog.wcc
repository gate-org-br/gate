/* global customElements, template */

import './g-icon.mjs';
import './g-field-editor.mjs';
import GWindow from './g-window.mjs';

export default class GFieldEditorDialog extends GWindow
{
	constructor()
	{
		super();
		this.shadowRoot.innerHTML =
			this.shadowRoot.innerHTML + template.innerHTML;

		let editor = this.shadowRoot.querySelector("g-field-editor");

		this.shadowRoot.getElementById("close").addEventListener("click", () => this.hide());
		this.shadowRoot.getElementById("cancel").addEventListener("click", () => this.hide());
		this.shadowRoot.getElementById("delete").addEventListener("click", () => this.dispatchEvent(new CustomEvent("delete")) | this.hide());
		this.shadowRoot.getElementById("commit").addEventListener("click", () =>
		{
			if (editor.validate())
			{
				this.dispatchEvent(new CustomEvent("commit", {detail: editor.value}));
				this.hide();
			}
		});
	}

	set caption(caption)
	{
		this.shadowRoot.getElementById("caption").innerHTML = caption;
	}

	get caption()
	{
		return this.shadowRoot.getElementById("caption").innerHTML;
	}

	set value(value)
	{
		this.shadowRoot.querySelector("g-field-editor").value = value;
		if (value)
			this.shadowRoot.getElementById("delete").removeAttribute("hidden");
		else
			this.shadowRoot.getElementById("delete").setAttribute("hidden", "true");

	}

	get value()
	{
		return this.shadowRoot.querySelector("g-field-editor").value;
	}

	static edit(value, caption)
	{
		let dialog = window.top.document.createElement("g-field-editor-dialog");
		dialog.value = value;
		if (caption)
			dialog.caption = caption;
		dialog.show();

		let promise = new Promise(resolve =>
		{
			dialog.addEventListener("commit", e => resolve(e.detail));
			dialog.addEventListener("delete", () => resolve(null));
		});

		return promise;
	}
}

customElements.define('g-field-editor-dialog', GFieldEditorDialog);