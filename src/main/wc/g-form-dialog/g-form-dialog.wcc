/* global customElements, template, fetch, Promise */

import './g-form.js';
import './g-icon.js';
import './g-coolbar.js';
import GWindow from './g-window.js';
import CancelError from './cancel-error.js';
import RequestBuilder from './request-builder.js';
import ResponseHandler from './response-handler.js';

export default class GFormDialog extends GWindow
{
	constructor()
	{
		super();
		this.addEventListener("cancel", () => this.hide());
		this.addEventListener("commit", () => this.hide());
		this.shadowRoot.innerHTML = this.shadowRoot.innerHTML + template.innerHTML;
		this.shadowRoot.getElementById("close").addEventListener("click", () => this.dispatchEvent(new CustomEvent("cancel")));
		this.shadowRoot.getElementById("cancel").addEventListener("click", () => this.dispatchEvent(new CustomEvent('cancel')));

		let form = this.shadowRoot.querySelector("g-form");
		let commit = this.shadowRoot.getElementById("commit");
		commit.addEventListener("click", () => form.reportValidity() && this.dispatchEvent(new CustomEvent("commit", {detail: form.value})));
	}

	set caption(caption)
	{
		this.shadowRoot.getElementById("caption").innerHTML = caption;
	}

	get caption()
	{
		return this.shadowRoot.getElementById("caption").innerHTML;
	}

	set value(value)
	{
		this.shadowRoot.querySelector("g-form").value = value;
	}

	get value()
	{
		this.shadowRoot.querySelector("g-form").value;
	}

	set width(value)
	{
		this.shadowRoot.querySelector("dialog").style.width = value;
	}

	set height(value)
	{
		this.shadowRoot.querySelector("dialog").style.height = value;
	}

	static pick(value, options)
	{
		return GFormDialog.edit(value.map(e => typeof e === 'string' ? {name: e, required: true} : e), options)
			.then(fields => fields.map(field => field.multiple || !field.value ? field.value : field.value[0]));
	}

	static edit(value, options)
	{
		value = value.map(e => typeof e === 'string' ? {name: e, required: true} : e);
		return new Promise((resolve, reject) =>
		{
			let dialog = window.top.document.createElement("g-form-dialog");
			dialog.value = value;
			if (typeof options === 'object')
			{
				if (options.caption)
					dialog.caption = options.caption;
				if (options.width)
					dialog.width = options.width;
				if (options.height)
					dialog.height = options.height;
			} else if (typeof options === 'string')
				dialog.caption = options;
			dialog.show();

			dialog.addEventListener("commit", e => resolve(e.detail));
			dialog.addEventListener("cancel", () => reject(new CancelError()));
		});
	}

	static update(url, options)
	{
		return fetch(url)
			.then(response => ResponseHandler.json(response))
			.then(form => GFormDialog.edit(form, options))
			.then(result => result
					? fetch(url, {method: "post", headers: {'Content-Type': 'application/json'}, body: JSON.stringify(result)})
					: Promise.resolve({"ok": true}))
			.then(response => ResponseHandler.json(response));
	}
}

customElements.define('g-form-dialog', GFormDialog);