/* global customElements, template */

import './g-icon.js';
import GWindow from './g-window.js';

/**
 * Represents a custom message dialog window that extends GWindow.
 * @extends {GWindow}
 * @class
 */
export default class GMessageDialog extends GWindow
{
	/**
	 * Creates an instance of GMessageDialog.
	 * @constructor
	 */
	constructor()
	{
		super();
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		this.shadowRoot.getElementById("cancel").addEventListener("click", () => this.hide());
	}

	/**
	 * Sets the type attribute of the message dialog.
	 * @param {string} type - The type of the message dialog (SUCCESS, WARNING, ERROR, INFO).
	 */
	set type(type)
	{
		this.setAttribute("type", type);
	}

	/**
	 * Gets the type attribute of the message dialog.
	 * @returns {string} - The type of the message dialog.
	 */
	get type()
	{
		return this.getAttribute("type");
	}

	/**
	 * Sets the text attribute of the message dialog.
	 * @param {string} text - The text content of the message dialog.
	 */
	set text(text)
	{
		this.setAttribute("text", text);
	}

	/**
	 * Gets the text attribute of the message dialog.
	 * @returns {string} - The text content of the message dialog.
	 */
	get text()
	{
		return this.getAttribute("text");
	}

	/**
	 * Gets the title attribute of the message dialog.
	 * @returns {string} - The title of the message dialog.
	 */
	get title()
	{
		return this.getAttribute("title");
	}

	/**
	 * Sets the title attribute of the message dialog.
	 * @param {string} title - The title of the message dialog.
	 */
	set title(title)
	{
		return this.setAttribute("title", title);
	}

	attributeChangedCallback(name)
	{
		switch (name)
		{
			case 'title':
				this.shadowRoot.getElementById("title").innerText = this.title || "";
				break;
			case 'text':
				this.shadowRoot.querySelector("section").innerText = this.text || "";
				break;
		}
	}

	static get observedAttributes()
	{
		return ['type', 'text', "title"];
	}

	/**
	 * Shows a success message dialog with the provided text and optional duration.
	 * @static
	 * @param {string} text - The text content of the success message.
	 * @param {number} [duration] - The duration in milliseconds for the message dialog.
	 */
	static success(text, duration)
	{
		var message = window.top.document.createElement("g-message-dialog");
		message.type = "SUCCESS";
		message.text = text;
		message.title = "Sucesso";
		message.duration = duration;
		message.show();

		if (duration)
			window.top.setTimeout(() => message.hide(), duration);
	}

	/**
	 * Shows a warning message dialog with the provided text and optional duration.
	 * @static
	 * @param {string} text - The text content of the warning message.
	 * @param {number} [duration] - The duration in milliseconds for the message dialog.
	 */
	static warning(text, duration)
	{
		var message = window.top.document.createElement("g-message-dialog");
		message.type = "WARNING";
		message.text = text;
		message.title = "Alerta";
		message.duration = duration;
		message.show();

		if (duration)
			window.top.setTimeout(() => message.hide(), duration);
	}

	/**
	 * Shows an error message dialog with the provided text and optional duration.
	 * @static
	 * @param {string} text - The text content of the error message.
	 * @param {number} [duration] - The duration in milliseconds for the message dialog.
	 */
	static error(text, duration)
	{
		var message = window.top.document.createElement("g-message-dialog");
		message.type = "ERROR";
		message.text = text;
		message.title = "Erro";
		message.duration = duration;
		message.show();

		if (duration)
			window.top.setTimeout(() => message.hide(), duration);
	}

	/**
	 * Shows an info message dialog with the provided text and optional duration.
	 * @static
	 * @param {string} text - The text content of the info message.
	 * @param {number} [duration] - The duration in milliseconds for the message dialog.
	 */
	static info(text, duration)
	{
		var message = window.top.document.createElement("g-message-dialog");
		message.type = "INFO";
		message.text = text;
		message.title = "Informação";
		message.duration = duration;
		message.show();

		if (duration)
			window.top.setTimeout(() => message.hide(), duration);
	}

	/**
	 * Shows a message dialog based on the provided status object and optional duration.
	 * @static
	 * @param {Object} status - The status object containing type and message properties.
	 * @param {number} [duration] - The duration in milliseconds for the message dialog.
	 */
	static show(type, message, duration)
	{
		switch (type)
		{
			case "success":
				GMessageDialog.success(message, duration);
				break;
			case "warning":
				GMessageDialog.warning(message, duration);
				break;
			case "error":
				GMessageDialog.error(message, duration);
				break;
			case "info":
				GMessageDialog.info(message, duration);
				break;
		}
	}
}

customElements.define('g-message-dialog', GMessageDialog);