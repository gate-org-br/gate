/* global customElements */

customElements.define("g-scroll-tabbar", class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: 'open'});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let div = this.shadowRoot.firstElementChild;
		this.addEventListener("mouseenter", () => div.style.overflowX = "auto");
		this.addEventListener("mouseleave", () => div.style.overflowX = "hidden");
		this.addEventListener("touchstart", () => div.style.overflowX = "auto");
		this.addEventListener("touchend", () => div.style.overflowX = "hidden");
		this.addEventListener("touchmove", e => div.style.overflowX = this.contains(e.target) ? "auto" : "hidden");

		div.addEventListener("scroll", () => this.update());
	}

	connectedCallback()
	{
		let div = this.shadowRoot.querySelector("div");
		Array.from(this.children).forEach(e => div.appendChild(e));
		window.setTimeout(() => this.update(), 0);
		window.addEventListener("resize", () => this.update());
	}

	update()
	{
		let div = this.shadowRoot.querySelector("div");
		this.setAttribute("data-overflowing", "none");

		if (div.firstElementChild)
		{
			let containerMetrics = div.getBoundingClientRect();
			let containerMetricsRight = Math.floor(containerMetrics.right);
			let containerMetricsLeft = Math.floor(containerMetrics.left);

			let left = Math.floor(div.firstElementChild.getBoundingClientRect().left);
			let right = Math.floor(div.lastElementChild.getBoundingClientRect().right);

			if (containerMetricsLeft > left
				&& containerMetricsRight < right)
				this.setAttribute("data-overflowing", "both");
			else if (left < containerMetricsLeft)
				this.setAttribute("data-overflowing", "left");
			else if (right > containerMetricsRight)
				this.setAttribute("data-overflowing", "right");
			else
				this.setAttribute("data-overflowing", "none");
		}

		Array.from(div.children).filter(e => e.getAttribute("aria-selected"))
			.forEach(e => e.scrollIntoView({inline: "center", block: "nearest"}));
	}

	disconnectedCallback()
	{
		window.removeEventListener("resize", () => this.update());
	}
});