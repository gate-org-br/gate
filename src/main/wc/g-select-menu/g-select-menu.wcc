/* global customElements */



customElements.define('g-select-menu', class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		this.addEventListener("mouseleave", () => this.opened = false);
		this.shadowRoot.addEventListener("click", () => this.opened = !this.opened);
	}

	set commands(commands)
	{
		let main = this.shadowRoot.querySelector("main");
		Array.from(commands).forEach(command =>
		{
			let link = main.appendChild(document.createElement("a"));
			link.href = '#';
			link.innerText = command.text;
			link.appendChild(document.createElement("g-icon")).innerHTML = `&#X${command.icon}`;
			link.addEventListener("click", () => command.action());
		});
	}

	get opened()
	{
		return this.hasAttribute("opened");
	}

	set opened(opened)
	{
		if (opened)
			this.setAttribute("opened", "opened");
		else
			this.removeAttribute("opened");

	}

	set label(label)
	{
		this.shadowRoot.querySelector("header")
				.setAttribute("title", label);
	}

	get label()
	{
		this.shadowRoot.querySelector("header")
				.getAttribute("title");
	}

	connectedCallback()
	{
		Array.from(this.children)
				.map(option => option.querySelector("g-icon, i"))
				.filter(icon => icon)
				.forEach(icon => icon.parentNode.appendChild(icon));
	}

	attributeChangedCallback()
	{
		this.label = this.getAttribute("label");
	}

	static get observedAttributes()
	{
		return ["label"];
	}
});