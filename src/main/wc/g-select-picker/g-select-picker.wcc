/* global customElements, template, fetch */

import './g-icon.js';
import './g-grid.js';
import GWindow from './g-window.js';
import Extractor from './extractor.js';
import ObjectFilter from './object-filter.js';
import GMessageDialog from './g-message-dialog.js';
import ResponseHandler from './response-handler.js';

export default class GSelectPicker extends GWindow
{
	constructor()
	{
		super();
		this._private = {};
		this.addEventListener("cancel", () => this.hide());
		this.addEventListener("commit", () => this.hide());
		this.shadowRoot.innerHTML = this.shadowRoot.innerHTML + template.innerHTML;
		this.shadowRoot.getElementById("cancel").addEventListener("click", () => this.dispatchEvent(new CustomEvent("cancel")));

		let grid = this.shadowRoot.querySelector("g-grid");
		grid.addEventListener("select", e => this.dispatchEvent(new CustomEvent("commit", {detail: {index: e.detail.index, value: e.detail.value}})));


		let input = this.shadowRoot.querySelector("input");
		input.addEventListener("input", () => grid.dataset = ObjectFilter.filter(this.options, input.value));
	}

	set caption(caption)
	{
		this.shadowRoot.getElementById("caption").innerHTML = caption;
	}

	get caption()
	{
		return this.shadowRoot.getElementById("caption").innerHTML;
	}

	get options()
	{
		return this._private.options || [];
	}

	set options(options)
	{
		this._private.options = options;
		this.shadowRoot.querySelector("g-grid").dataset = options;
	}

	static pick(options, caption)
	{
		if (typeof options === "string")
			return fetch(options)
				.then(response =>
				{
					return response.ok ?
						response.json()
						: response.text().then(message =>
					{
						throw new Error(message);
					});
				}).then(result => GSelectPicker.pick(result, caption));

		let picker = window.top.document.createElement("g-select-picker");
		picker.options = options;
		if (caption)
			picker.caption = caption;
		picker.show();

		return new Promise((resolve, reject) =>
		{
			picker.addEventListener("cancel", () => reject(new Error("Cancel")));
			picker.addEventListener("commit", e => resolve(e.detail));
		});
	}
};

window.addEventListener("click", function (event)
{
	if (event.button !== 0)
		return;

	let link = event.target.closest("a[target='@select']");
	if (!link && event.composed)
		link = event.composedPath()[0].closest("a[target='@select']");

	if (link)
	{
		event.preventDefault();
		event.stopPropagation();

		let label = link.parentNode.querySelector("input[type=text]");
		if (!label)
			throw new Error("Label input not found");

		let value = link.parentNode.querySelector("input[type=hidden]");
		if (!value)
			throw new Error("Value input not found");

		if (label.value || value.value)
			return label.value = value.value = '';

		link.style.pointerEvents = "none";
		fetch(link.href)
			.then(options => ResponseHandler.json(options))
			.catch(error => GMessageDialog.error(error.message))
			.then(options => GSelectPicker.pick(options, link.title))
			.then(object =>
			{
				label.value = Extractor.label(object.value);
				value.value = Extractor.value(object.value);
			})
			.catch(() => undefined)
			.finally(() => link.style.pointerEvents = "");
	}
});

customElements.define('g-select-picker', GSelectPicker);