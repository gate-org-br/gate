/* global customElements, template */

customElements.define("g-select", class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let changed = false;
		let select = this.shadowRoot.getElementById("select");
		let label = this.shadowRoot.getElementById("label");
		let modal = this.shadowRoot.getElementById("modal");
		let dialog = this.shadowRoot.getElementById("dialog");
		let close = this.shadowRoot.getElementById("close");
		let slot = this.shadowRoot.querySelector("slot");

		dialog.addEventListener("click", event =>
		{
			event.preventDefault();
			event.stopPropagation();
		});

		select.addEventListener("click", e =>
		{
			e.preventDefault();
			e.stopPropagation();
			modal.style.display = "flex";
		});

		slot.addEventListener("click", event =>
		{
			event.stopPropagation();
			if (modal.style.display === "none")
				event.preventDefault();
		});

		modal.addEventListener("click", event =>
		{
			close.click();
			event.preventDefault();
			event.stopPropagation();
			modal.style.display = "none";

			if (changed)
				this.dispatchEvent(new CustomEvent("change"));
		});

		close.addEventListener("click", () =>
		{
			let labels = this.labels;
			label.innerText = labels.length === 1 ?
				labels[0] : labels.length + " selecionados";

			modal.style.display = "none";
			if (changed)
				this.dispatchEvent(new CustomEvent("change"));
		});

		slot.addEventListener("slotchange", () =>
		{
			Array.from(this.querySelectorAll("input"))
				.forEach(e => e.addEventListener("change", () => changed = true));

			let labels = this.labels;
			label.innerText = labels.length === 1 ?
				labels[0] : labels.length + " selecionados";

		});
	}

	get values()
	{
		return Array.from(this.querySelectorAll("input"))
			.filter(e => e.checked).map(e => e.value);
	}

	get labels()
	{
		return Array.from(this.querySelectorAll("input"))
			.filter(e => e.checked).map(e => e.parentNode.innerText);
	}

});