/* global customElements */

import GContextMenu from './g-context-menu.js';
import GMessageDialog from './g-message-dialog.js';

customElements.define('g-selectn', class extends HTMLElement
{
	#options;
	#internals;
	static formAssociated = true;

	constructor()
	{
		super();
		this.attachShadow({mode: "open"});
		this.#internals = this.attachInternals();
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		this.addEventListener("click", event =>
		{
			if (event.target.tagName === "LABEL")
				event.target.previousElementSibling.click();
		});

		this.addEventListener("change", () => this.connectedCallback());

		let checker = this.shadowRoot.querySelector("input");
		checker.addEventListener("change", () => Array.from(this.querySelectorAll("input")).forEach(e => e.checked = checker.checked));
	}

	focus()
	{
		super.focus();
		this.querySelector("input").focus();
	}

	set options(options)
	{
		this.#options = options;
		Array.from(this.querySelectorAll("input, label"))
			.forEach(e => e.remove());
		options.forEach(option =>
		{
			let checkbox = this.appendChild(document.createElement("input"));
			checkbox.addEventListener("change", () => this.dispatchEvent(new CustomEvent("change")));
			checkbox.type = "checkbox";
			checkbox.name = this.name;
			checkbox.value = option.value;
			let label = this.appendChild(document.createElement("label"));
			label.innerText = option.label;
		});
	}

	get options()
	{
		return this.#options;
	}

	get value()
	{
		return Array.from(this.querySelectorAll("input"))
			.filter(checkbox => checkbox.checked)
			.map(checkbox => checkbox.value);
	}

	set value(value)
	{
		Array.from(this.querySelectorAll("input"))
			.forEach(checkbox => checkbox.checked = value.includes(checkbox.value));
	}

	get name()
	{
		return this.getAttribute("name");
	}

	set name(name)
	{
		this.setAttribute("name", name);
	}

	get required()
	{
		return this.getAttribute("required");
	}

	set required(required)
	{
		if (required)
			this.setAttribute("required", "required");
		else
			this.removeAttribute("required");
	}

	set max(max)
	{
		this.setAttribute("max", "max");
	}

	get max()
	{
		return this.hasAttribute("max") ? Number(this.getAttribute("max")) : null;
	}

	set min(min)
	{
		this.setAttribute("min", "min");
	}

	get min()
	{
		return this.hasAttribute("min") ? Number(this.getAttribute("min")) : null;
	}

	connectedCallback()
	{
		let checked =
			Array.from(this.querySelectorAll("input"))
			.filter(checkbox => checkbox.checked)
			.length;

		if (this.required && !checked)
			this.#internals.setValidity({valueMissing: true}, "Selecione ao menos uma opção", this.shadowRoot.querySelector("input"));

		else if (this.min && checked < this.min)
			this.#internals.setValidity({rangeUnderflow: true}, `Selecione ao menos ${this.min} opções`, this.shadowRoot.querySelector("input"));

		else if (this.max && checked > this.max)
			this.#internals.setValidity({rangeOverflow: true}, `Selecione no máximo ${this.max} opções`, this.shadowRoot.querySelector("input"));
		else
			this.#internals.setValidity({});
	}

	attributeChangedCallback(attribute)
	{
		if (attribute === "name")
			Array.from(this.querySelectorAll("input"))
				.forEach(checkbox => checkbox.name = this.name);
		else if (attribute === "value")
			this.value = JSON.parse(this.getAttribute("value"));
		else
			this.options = JSON.parse(this.getAttribute("options"));
	}

	checkValidity()
	{
		let checked =
			Array.from(this.querySelectorAll("input"))
			.filter(checkbox => checkbox.checked)
			.length;

		if (this.required && !checked)
			return false;

		if (this.min && checked < min)
			return false;

		if (this.max && checked > max)
			return false;

		return true;
	}

	reportValidity()
	{
		let checked =
			Array.from(this.querySelectorAll("input"))
			.filter(checkbox => checkbox.checked)
			.length;

		if (this.required && !checked)
			return false & GMessageDialog.error("Selecione ao menos uma opção");

		if (this.min && checked < min)
			return false & GMessageDialog.error(`Selecione ao menos ${min} opções`);

		if (this.max && checked > max)
			return false & GMessageDialog.error(`Selecione no máximo ${max} opções`);

		return true;
	}

	static get observedAttributes()
	{
		return ['name', 'value', "options"];
	}
});