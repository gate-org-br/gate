/* global customElements */

import loading from './loading.js';

const EPSILON = 0.5;
function visible(element, container)
{
	element = element.getBoundingClientRect();
	container = container.getBoundingClientRect();
	return element.top >= container.top - EPSILON &&
		element.left >= container.left - EPSILON &&
		element.bottom <= container.bottom + EPSILON &&
		element.right <= container.right + EPSILON;
}

function scroll(tabbar, first, next, inline)
{
	let div = tabbar.shadowRoot.querySelector("div");
	for (let element = first; element; element = next(element))
		if (element.tagName === "A"
			|| element.tagName === "BUTTON"
			|| element.classList.contains(".g-command"))
			if (visible(element, div))
				for (element = next(element); element; element = next(element))
					if (!visible(element, div))
						return element.scrollIntoView({inline, behavior: "smooth"});
}

customElements.define("g-tabbar", class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: 'open'});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let div = this.shadowRoot.querySelector("div");
		this.shadowRoot.querySelector("#next").addEventListener("click", () => scroll(this, this.firstElementChild, e => e.nextElementSibling, "start"));
		this.shadowRoot.querySelector("#prev").addEventListener("click", () => scroll(this, this.lastElementChild, e => e.previousElementSibling, "end"));

		div.addEventListener("scroll", () => this.update());
		new ResizeObserver(() => this.update()).observe(this);

		this.addEventListener("trigger-success",
			event => Array.from(this.children)
				.forEach(e => e === event.target
						? e.setAttribute("aria-selected", "")
						: e.removeAttribute("aria-selected")));
	}

	connectedCallback()
	{
		loading(this.parentNode);

		this.update();
		Array.from(this.children)
			.flatMap(e => Array.from(e.childNodes))
			.filter(e => e.nodeType === Node.TEXT_NODE)
			.forEach(e => e.parentNode.appendChild(e));
	}

	update()
	{
		let div = this.shadowRoot.querySelector("div");
		let next = this.shadowRoot.querySelector("#next");
		let prev = this.shadowRoot.querySelector("#prev");

		prev.style.display = "none";
		next.style.display = "none";
		if (!visible(this.firstElementChild, div))
			if (!visible(this.lastElementChild, div))
				prev.style.display = next.style.display = "flex";
			else
				prev.style.display = "flex";
		else if (!visible(this.lastElementChild, div))
			next.style.display = "flex";
	}
});