/* global customElements */

import loading from './loading.js';
import TriggerExtractor from './trigger-extractor.js';

customElements.define("g-tabbar", class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: 'open'});
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		let div = this.shadowRoot.querySelector("div");
		window.addEventListener("trigger-success", event =>
		{
			let target = event.detail.cause.target;
			let trigger = Array.from(this.children)
				.filter(e => e === target ||
						(TriggerExtractor.method(e) === TriggerExtractor.method(target)
							&& TriggerExtractor.action(e) === TriggerExtractor.action(target)
							&& TriggerExtractor.target(e) === TriggerExtractor.target(target)))[0];
			if (trigger)
				this.select(trigger);
		});
	}

	connectedCallback()
	{
		loading(this.parentNode);
		Array.from(this.children)
			.flatMap(e => Array.from(e.childNodes))
			.filter(e => e.nodeType === Node.TEXT_NODE)
			.forEach(e => e.parentNode.appendChild(e));
		let action = window.location.href;
		let origin = window.location.origin;
		let triggers = Array.from(this.children).filter(e => TriggerExtractor.target(e) === "_self");
		let selected = triggers.filter(e => action === new URL(TriggerExtractor.action(e), origin).href)[0]
			|| triggers.filter(e => action.startsWith(TriggerExtractor.action(e)))[0];
		if (selected)
			this.select(selected);
	}

	select(element)
	{
		Array.from(this.children).forEach(e =>
		{
			if (e === element)
				e.setAttribute("aria-selected", "")
			else
				e.removeAttribute("aria-selected");
		});
	}
});