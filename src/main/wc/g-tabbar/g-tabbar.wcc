/* global customElements */

function visible(element, container)
{
	element = element.getBoundingClientRect();
	container = container.getBoundingClientRect();
	return 	element.top >= container.top &&
		element.left >= container.left &&
		element.bottom <= container.bottom &&
		element.right <= container.right;
}

customElements.define("g-tabbar", class extends HTMLElement
{
	constructor()
	{
		super();
		this.attachShadow({mode: 'open'});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let div = this.shadowRoot.querySelector("div");
		this.addEventListener("mouseenter", () => div.style.overflowX = "auto");
		this.addEventListener("mouseleave", () => div.style.overflowX = "hidden");
		this.addEventListener("touchstart", () => div.style.overflowX = "auto");
		this.addEventListener("touchend", () => div.style.overflowX = "hidden");
		this.addEventListener("touchmove", e => div.style.overflowX = this.contains(e.target) ? "auto" : "hidden");

		this.shadowRoot.querySelector("#next").addEventListener("click", () =>
		{
			for (let element = this.firstElementChild; element; element = element.nextElementSibling)
				if (visible(element, div))
					for (element = element.nextElementSibling; element; element = element.nextElementSibling)
						if (!visible(element, div))
							return element.scrollIntoView({inline: "start",
								behavior: "smooth"});
		}
		);

		this.shadowRoot.querySelector("#prev").addEventListener("click", () =>
		{
			for (let element = this.lastElementChild; element; element = element.previousElementSibling)
				if (visible(element, div))
					for (element = element.previousElementSibling; element; element = element.previousElementSibling)
						if (!visible(element, div))
							return element.scrollIntoView({inline: "end",
								behavior: "smooth"});

		});

		div.addEventListener("scroll", () => this.update());
		new ResizeObserver(() => this.update()).observe(this);
	}

	connectedCallback()
	{
		this.update();
	}

	update()
	{
		let div = this.shadowRoot.querySelector("div");
		this.setAttribute("data-overflowing", "none");

		if (div.firstElementChild)
		{
			let containerMetrics = div.getBoundingClientRect();
			let containerMetricsRight = Math.floor(containerMetrics.right);
			let containerMetricsLeft = Math.floor(containerMetrics.left);

			let left = Math.floor(this.firstElementChild.getBoundingClientRect().left);
			let right = Math.floor(this.lastElementChild.getBoundingClientRect().right);

			if (containerMetricsLeft > left
				&& containerMetricsRight < right)
				this.setAttribute("data-overflowing", "both");
			else if (left < containerMetricsLeft)
				this.setAttribute("data-overflowing", "left");
			else if (right > containerMetricsRight)
				this.setAttribute("data-overflowing", "right");
			else
				this.setAttribute("data-overflowing", "none");
		}

		Array.from(this.children).filter(e => e.getAttribute("aria-selected"))
			.forEach(e => e.scrollIntoView({inline: "center", block: "nearest"}));
	}
});