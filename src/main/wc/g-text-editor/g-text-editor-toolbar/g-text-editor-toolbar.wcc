/* global customElements */
import './g-icon.js';
import GMenuPicker from './g-menu-picker.js';
import GFormDialog from './g-form-dialog.js';

customElements.define('g-text-editor-toolbar', class extends HTMLElement
{
	constructor()
	{
		super();
		this.tabindex = 1;
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let editor = this.editor;

		Array.from(this.shadowRoot.querySelectorAll("button > input")).forEach(e => e.parentNode.addEventListener("click", () => e.click()));

		this.shadowRoot.getElementById("formatFontName").addEventListener("change", e => editor.formatFontName(e.target.value));
		this.shadowRoot.getElementById("formatFontSize").addEventListener("change", e => editor.formatFontSize(e.target.value));

		this.shadowRoot.getElementById("formatBold").addEventListener("click", () => editor.formatBold());
		this.shadowRoot.getElementById("formatItalic").addEventListener("click", () => editor.formatItalic());

		this.shadowRoot.getElementById("formatUnderline").addEventListener("click", () => editor.formatUnderline());
		this.shadowRoot.getElementById("formatStrikeThrough").addEventListener("click", () => editor.formatStrikeThrough());

		this.shadowRoot.getElementById("formatFontColor").addEventListener("change", e => editor.formatFontColor(e.target.value));
		this.shadowRoot.getElementById("formatBackColor").addEventListener("change", e => editor.formatBackColor(e.target.value));

		this.shadowRoot.getElementById("formatJustifyLeft").addEventListener("click", () => editor.formatJustifyLeft());
		this.shadowRoot.getElementById("formatJustifyCenter").addEventListener("click", () => editor.formatJustifyCenter());
		this.shadowRoot.getElementById("formatJustifyRight").addEventListener("click", () => editor.formatJustifyRight());
		this.shadowRoot.getElementById("formatJustifyFull").addEventListener("click", () => editor.formatJustifyFull());

		this.shadowRoot.getElementById("formatRemove").addEventListener("click", () => editor.formatRemove());

		this.shadowRoot.getElementById("undo").addEventListener("click", () => editor.undo());
		this.shadowRoot.getElementById("redo").addEventListener("click", () => editor.redo());

		this.shadowRoot.getElementById("attach").addEventListener("click", () => editor.attach());

		this.shadowRoot.getElementById("class").addEventListener("click", e =>
		{
			let selection = editor.selection;
			GMenuPicker.pick([
				{label: "Título", value: "title"},
				{label: "Subtítulo", value: "subtitle"},
				{label: "Chamada", value: [
						{label: "Sólida", value: [
								{label: "Alerta", value: "callout warning fill"},
								{label: "Informação", value: "callout fill"},
								{label: "Perigo", value: "callout danger fill"},
								{label: "Questionamento", value: "callout question fill"},
								{label: "Sucesso", value: "callout success fill"}]},
						{label: "Transparente", value: [
								{label: "Alerta", value: "callout warning"},
								{label: "Informação", value: "callout"},
								{label: "Perigo", value: "callout danger"},
								{label: "Questionamento", value: "callout question"},
								{label: "Sucesso", value: "callout success"}]}]}],
				"Selecione um estilo")
				.then(value => value && selection.updateClass(value));
		});
		this.shadowRoot.getElementById("emoji").addEventListener("change", e => editor.selection.appendText(e.target.value));
		this.shadowRoot.getElementById("link").addEventListener("click", e => editor.selection.link(prompt("Editar URL")));
		Array.from(this.shadowRoot.querySelectorAll("select")).forEach(e => e.addEventListener("change", () => e.value = ""));
		Array.from(this.shadowRoot.querySelectorAll("input[type='color']")).forEach(e => e.addEventListener("change", () => e.value = "#CCCCCC"));
	}

	separator()
	{
		this.shadowRoot.appendChild(document.createElement("span"));
		return this;
	}

	spacer()
	{
		this.shadowRoot.appendChild(document.createElement("div"));
		return this;
	}

	command(icon, title, action)
	{
		let button = this.appendChild(document.createElement("button"));
		button.title = title;
		button.innerHTML = `&#X${icon}`;
		button.addEventListener("click", action);
		return this;
	}

	get editor()
	{
		return this.getRootNode().host;
	}
});