/* global customElements */
import './g-icon.js';
import GHierarchicalOptionPicker from './g-hierarchical-option-picker.js';

const classes =
	[{
			label: "Título",
			title: "Título",
			value: "title"
		},
		{
			label: "Subtítulo",
			title: "Subtítulo",
			value: "subtitle"
		}, {
			label: "Chamada",
			title: "Chamada",
			value: [{
					label: "Sólida",
					title: "Chamada sólida",
					value: [{label: "Alerta", title: "Chamada sólida de alerta", value: "callout warning fill"},
						{label: "Informação", title: "Chamada sólida de informação", value: "callout fill"},
						{label: "Perigo", title: "Chamada sólida de perigo", value: "callout danger fill"},
						{label: "Questionamento", title: "Chamada sólida de questionamento", value: "callout question fill"},
						{label: "Sucesso", title: "Chamada sólida de sucesso", value: "callout success fill"}]
				}, {
					label: "Transparente",
					title: "Chamada transparente",
					value: [{label: "Alerta", title: "Chamada transparente de alerta", value: "callout warning"},
						{label: "Informação", title: "Chamada transparente de informação", value: "callout"},
						{label: "Perigo", title: "Chamada transparente de perigo", value: "callout danger"},
						{label: "Questionamento", title: "Chamada transparente de questionamento", value: "callout question"},
						{label: "Sucesso", title: "Chamada transparente de sucesso", value: "callout success"}]
				}]
		}];

customElements.define('g-text-editor-toolbar', class extends HTMLElement
{
	constructor()
	{
		super();
		this.tabindex = 1;
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));

		let editor = this.editor;

		Array.from(this.shadowRoot.querySelectorAll("button > input")).forEach(e => e.parentNode.addEventListener("click", () => e.click()));

		this.shadowRoot.getElementById("bold").addEventListener("click", () => editor.selection.toggleStyle("font-weight", "700", "400"));
		this.shadowRoot.getElementById("italic").addEventListener("click", () => editor.selection.toggleStyle("font-style", "italic", "normal"));

		this.shadowRoot.getElementById("text-decoration").addEventListener("change", e => editor.selection.updateStyle("text-decoration-line", e.target.value));

		this.shadowRoot.getElementById("color").addEventListener("change", e => editor.selection.updateStyle("color", e.target.value));
		this.shadowRoot.getElementById("background-color").addEventListener("change", e => editor.selection.updateStyle("background-color", e.target.value));
		this.shadowRoot.getElementById("border-color").addEventListener("change", e => editor.selection.updateStyle("border", value && value !== '#FFFFFF' ? `1px solid ${value}` : 'none'));

		this.shadowRoot.getElementById("font-size").addEventListener("change", e => editor.selection.updateStyle('font-size', e.target.value));
		this.shadowRoot.getElementById("padding").addEventListener("change", e => editor.selection.updateStyle('padding', e.target.value));
		this.shadowRoot.getElementById("margin").addEventListener("change", e => editor.selection.updateStyle('margin', e.target.value));

		this.shadowRoot.getElementById("class")
			.addEventListener("click", e =>
			{
				let selection = editor.selection;
				GHierarchicalOptionPicker.pick(classes, "Selecione um estilo")
					.then(value => value && selection.updateClass(value))
			});

		this.shadowRoot.getElementById("remove-format").addEventListener("click", () => editor.selection.clearStyles());

		this.shadowRoot.getElementById("emoji").addEventListener("change", e => editor.selection.appendText(e.target.value));

		this.shadowRoot.getElementById("text-align-center").addEventListener("click", () => editor.selection.updateStyle("display", "block").updateStyle("text-align", "center"));
		this.shadowRoot.getElementById("text-align-left").addEventListener("click", () => editor.selection.updateStyle("display", "block").updateStyle("text-align", "left"));
		this.shadowRoot.getElementById("text-align-right").addEventListener("click", () => editor.selection.updateStyle("display", "block").updateStyle("text-align", "right"));
		this.shadowRoot.getElementById("text-align-justify").addEventListener("click", () => editor.selection.updateStyle("display", "block").updateStyle("text-align", "justify"));

		this.shadowRoot.getElementById("insertUnorderedList").addEventListener("click", () => editor.insertUnorderedList());
		this.shadowRoot.getElementById("insertOrderedList").addEventListener("click", () => editor.insertOrderedList());

		this.shadowRoot.getElementById("createLink").addEventListener("click", () => editor.createLink());
		this.shadowRoot.getElementById("unlink").addEventListener("click", () => editor.unlink());

		this.shadowRoot.getElementById("attach").addEventListener("click", () => editor.attach());

		Array.from(this.shadowRoot.querySelectorAll("select")).forEach(e => e.addEventListener("change", () => e.value = ""));
	}

	separator()
	{
		this.shadowRoot.appendChild(document.createElement("span"));
		return this;
	}

	spacer()
	{
		this.shadowRoot.appendChild(document.createElement("div"));
		return this;
	}

	command(icon, title, action)
	{
		let button = this.appendChild(document.createElement("button"));
		button.title = title;
		button.innerHTML = `&#X${icon}`;
		button.addEventListener("click", action);
		return this;
	}

	get editor()
	{
		return this.getRootNode().host;
	}
});