/* global customElements */

customElements.define('g-text-editor', class extends HTMLElement
{
	constructor()
	{
		super();
		this.tabindex = 0;
		this.attachShadow({mode: "open"});
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		this._private = {"input": document.createElement("input")};
		this._private.input.setAttribute("type", "hidden");

		this.shadowRoot.getElementById("bold").addEventListener("click", () => this.bold());
		this.shadowRoot.getElementById("italic").addEventListener("click", () => this.italic());
		this.shadowRoot.getElementById("underline").addEventListener("click", () => this.underline());
		this.shadowRoot.getElementById("strikeThrough").addEventListener("click", () => this.strikeThrough());

		this.shadowRoot.getElementById("red").addEventListener("click", () => this.redFont());
		this.shadowRoot.getElementById("green").addEventListener("click", () => this.greenFont());
		this.shadowRoot.getElementById("blue").addEventListener("click", () => this.blueFont());

		this.shadowRoot.getElementById("increaseFontSize").addEventListener("click", () => this.increaseFontSize());
		this.shadowRoot.getElementById("decreaseFontSize").addEventListener("click", () => this.decreaseFontSize());

		this.shadowRoot.getElementById("removeFormat").addEventListener("click", () => this.removeFormat());

		this.shadowRoot.getElementById("justifyCenter").addEventListener("click", () => this.justifyCenter());
		this.shadowRoot.getElementById("justifyLeft").addEventListener("click", () => this.justifyLeft());
		this.shadowRoot.getElementById("justifyRight").addEventListener("click", () => this.justifyRight());
		this.shadowRoot.getElementById("justifyFull").addEventListener("click", () => this.justifyFull());

		this.shadowRoot.getElementById("indent").addEventListener("click", () => this.indent());
		this.shadowRoot.getElementById("outdent").addEventListener("click", () => this.outdent());

		this.shadowRoot.getElementById("insertUnorderedList").addEventListener("click", () => this.insertUnorderedList());
		this.shadowRoot.getElementById("insertOrderedList").addEventListener("click", () => this.insertOrderedList());

		this.shadowRoot.getElementById("createLink").addEventListener("click", () => this.createLink());
		this.shadowRoot.getElementById("unlink").addEventListener("click", () => this.unlink());

		this.shadowRoot.getElementById("happyFace").addEventListener("click", () => this.happyFace());
		this.shadowRoot.getElementById("sadFace").addEventListener("click", () => this.sadFace());
		this.shadowRoot.getElementById("insertIcon").addEventListener("click", () => this.insertIcon());

		this.shadowRoot.getElementById("insertImage").addEventListener("click", () => this.insertImage());

		let editor = this.shadowRoot.getElementById("editor");
		this.addEventListener("focus", () =>
		{
			let range = document.createRange();
			range.setStart(editor, 0);
			range.setEnd(editor, 0);

			let selection = window.getSelection();
			selection.removeAllRanges();
			selection.addRange(range);
		});
		editor.addEventListener("input", () => this._private.input.value = editor.innerHTML);
	}

	bold()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("bold");
	}

	italic()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("italic");
	}

	underline()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("underline");
	}

	strikeThrough()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("strikeThrough");
	}

	redFont()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("foreColor", null, "#660000");
	}

	greenFont()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("foreColor", null, "#006600");
	}

	blueFont()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("foreColor", null, "#000066");
	}

	removeFormat()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("removeFormat");
	}

	justifyCenter()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("justifyCenter");
	}

	justifyLeft()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("justifyLeft");
	}

	justifyRight()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("justifyRight");
	}

	justifyFull()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("justifyFull");
	}

	indent()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("indent");
	}

	outdent()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("outdent");
	}

	insertUnorderedList()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("insertUnorderedList");
	}

	insertOrderedList()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("insertOrderedList");
	}

	createLink()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("createLink", null, prompt("Entre com a url"));
	}

	unlink()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("unlink");
	}

	happyFace()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("insertHTML", null, `<i>&#X2104</i>`);
	}

	sadFace()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("insertHTML", null, `<i>&#X2106</i>`);
	}

	increaseFontSize()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("increaseFontSize");
	}

	decreaseFontSize()
	{
		this.shadowRoot.getElementById("editor").focus();
		document.execCommand("decreaseFontSize");
	}

	insertIcon()
	{
		this.shadowRoot.getElementById("editor").focus();
		let picker = window.top.document.createElement("g-icon-picker");
		picker.addEventListener("picked", e => document.execCommand("insertHTML", null, `<i>&#X${e.detail}</i>`));
		picker.show();
	}

	insertImage()
	{
		let blob = document.createElement("input");
		blob.setAttribute("type", "file");
		blob.setAttribute("accept", ".jpg, .png, .svg, .jpeg, .gif, .bmp, .tif, .tiff|image/*");
		blob.addEventListener("change", () =>
		{
			let reader = new FileReader();
			reader.readAsDataURL(blob.files[0]);
			reader.onloadend = () =>
			{
				this.shadowRoot.getElementById("editor").focus();
				document.execCommand("insertImage", null, reader.result);
			};
		});
		blob.click();
	}

	connectedCallback()
	{
		this.appendChild(this._private.input);
		document.execCommand("styleWithCSS", null, true);
	}

	get value()
	{
		return this.getAttribute("value");
	}

	set value(value)
	{
		this.setAttribute("value", value);
	}

	get name()
	{
		return this.getAttribute("name");
	}

	set name(name)
	{
		this.setAttribute("name", name);
	}

	get required()
	{
		return this.getAttribute("required");
	}

	set required(required)
	{
		this.setAttribute("required", required);
	}

	get maxlength()
	{
		return this.getAttribute("maxlength");
	}

	set maxlength(maxlength)
	{
		this.setAttribute("maxlength", maxlength);
	}

	get pattern()
	{
		return this.getAttribute("pattern");
	}

	set pattern(pattern)
	{
		this.setAttribute("pattern", pattern);
	}

	get tabindex()
	{
		return this.getAttribute("tabindex");
	}

	set tabindex(tabindex)
	{
		this.setAttribute("tabindex", tabindex);
	}

	attributeChangedCallback(atrribute)
	{
		switch (atrribute)
		{
			case "name":
				this._private.input.setAttribute("name", this.name);
				break;
			case "value":
				this.shadowRoot.getElementById("editor").innerHTML = this.value;
				this._private.input.setAttribute("value", this.value);
				break;
			case "required":
				this._private.input.setAttribute("required", this.required);
				break;
			case "maxlength":
				this._private.input.setAttribute("maxlength", this.maxlength);
				break;
			case "pattern":
				this._private.input.setAttribute("pattern", this.pattern);
				break;
		}
	}

	static get observedAttributes()
	{
		return ["name", "value", "required", "maxlength", "pattern", "tabindex"];
	}
});