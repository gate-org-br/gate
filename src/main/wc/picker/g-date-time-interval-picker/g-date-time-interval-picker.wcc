/* global customElements, template */

import './g-icon.js';
import DOM from './dom.js';
import GWindow from './g-window.js';
import './g-date-time-interval-selector.js';

export default class GDateTimeIntervalPicker extends GWindow
{
	constructor()
	{
		super();
		this.addEventListener("cancel", () => this.hide());
		this.addEventListener("commit", () => this.hide());
		this.shadowRoot.innerHTML = this.shadowRoot.innerHTML + template.innerHTML;
		this.shadowRoot.getElementById("cancel").addEventListener("click", () => this.dispatchEvent(new CustomEvent('cancel')));

		let commit = this.shadowRoot.getElementById("commit");
		let selector = this.shadowRoot.querySelector("g-date-time-interval-selector");

		let dateTime = new Date();
		selector.min = dateTime;
		selector.max = dateTime;
		commit.innerText = selector.selection;

		selector.addEventListener("selected", () => commit.innerText = selector.selection);

		commit.addEventListener("click", () => this.dispatchEvent(new CustomEvent("commit", {detail: commit.innerText})) | this.hide());
	}

	static pick()
	{
		let picker = window.top.document.createElement("g-date-time-interval-picker");
		picker.show();

		return new Promise((resolve, reject) =>
		{
			picker.addEventListener("cancel", () => reject(new Error("Cancel")));
			picker.addEventListener("commit", e => resolve(e.detail));
		});
	}
}

customElements.define('g-date-time-interval-picker', GDateTimeIntervalPicker);

const REGISTRY = new WeakMap();
DOM.forEveryElement(e => e.tagName === "INPUT"
		&& !REGISTRY.has(e)
		&& e.classList.contains("DateTimeInterval"), input =>
	{
		REGISTRY.set(input);

		let link = input.parentNode.appendChild(document.createElement("a"));
		link.href = "#";
		if (input.hasAttribute('tabindex'))
			link.setAttribute("tabindex", input.getAttribute('tabindex'));
		let icon = link.appendChild(document.createElement("g-icon"));

		icon.innerHTML = input.value ? "&#x1001;" : "&#x2003;";
		input.addEventListener("input", () => icon.innerHTML = input.value ? "&#x1001;" : "&#x2003;");
		input.addEventListener("change", () => icon.innerHTML = input.value ? "&#x1001;" : "&#x2003;");

		link.addEventListener("click", function (event)
		{
			event.preventDefault();

			if (input.value)
			{
				input.value = '';
				input.dispatchEvent(new Event('change', {bubbles: true}));
			} else
				GDateTimeIntervalPicker.pick()
					.then(value => input.value = value)
					.then(() => input.dispatchEvent(new Event('change', {bubbles: true})))
					.catch(() => undefined);

			link.focus();
			link.blur();
		});
	});