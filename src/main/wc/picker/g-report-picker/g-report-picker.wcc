/* global customElements, template */

import './g-icon.js';
import GWindow from './g-window.js';

export default class GReportPicker extends GWindow
{
	constructor()
	{
		super();
		this.addEventListener("cancel", () => this.hide());
		this.addEventListener("commit", () => this.hide());
		this.shadowRoot.appendChild(template.content.cloneNode(true));
		this.shadowRoot.getElementById("cancel").addEventListener("click", () => this.dispatchEvent(new CustomEvent('cancel')));

		Array.from(this.shadowRoot.querySelectorAll("button"))
			.forEach(button => button.addEventListener("click", () =>
					this.dispatchEvent(new CustomEvent("commit", {detail: button.id}))));
	}

	static pick(caption)
	{
		let picker = window.top.document.createElement("g-report-picker");
		picker.caption = caption;
		picker.show();

		return new Promise((resolve, reject) =>
		{
			picker.addEventListener("cancel", () => reject(new Error("Cancel")));
			picker.addEventListener("commit", e => resolve(e.detail));
		});
	}
}

customElements.define('g-report-picker', GReportPicker);