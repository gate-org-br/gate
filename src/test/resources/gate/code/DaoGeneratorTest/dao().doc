package gate.dao;

import gate.base.Dao;
import gate.entity.User;
import gate.error.AppException;
import gate.error.ConstraintViolationException;
import gate.error.NotFoundException;
import gate.sql.Link;
import gate.sql.condition.Condition;
import gate.sql.select.Select;
import gate.sql.delete.Delete;
import gate.sql.insert.Insert;
import gate.sql.update.Update;
import gate.type.ID;
import java.util.List;

public class UserDao extends Dao
{

	public UserDao()
	{
		super();
	}

	public UserDao(Link link)
	{
		super(link);
	}

	public List<User> search(User filter)
	{
		return Select.of(getClass().getResource("UserDao/search(User).sql"))
			.where(Condition.TRUE.and("Uzer.id").eq(filter.getId())
				.and("Uzer.active").eq(filter.getActive())
				.and("Uzer.username").eq(filter.getUsername())
				.and("Uzer.password").eq(filter.getPassword())
				.and("Uzer.name").eq(filter.getName())
				.and("Uzer.email").eq(filter.getEmail())
				.and("Uzer.Role$id").eq(filter.getRole().getId())
				.and("Uzer.description").eq(filter.getDescription())
				.and("Uzer.cellPhone").eq(filter.getCellPhone())
				.and("Uzer.phone").eq(filter.getPhone())
				.and("Uzer.photo").eq(filter.getPhoto())
				.and("Uzer.birthdate").eq(filter.getBirthdate())
				.and("Uzer.CPF").eq(filter.getCPF())
				.and("Uzer.sex").eq(filter.getSex())
				.and("Uzer.registration").eq(filter.getRegistration())
				.and("Uzer.code").eq(filter.getCode()))
			.build()
			.connect(getLink())
			.fetchEntityList(User.class);
	}

	public User select(ID id) throws NotFoundException
	{
		return Select.of(getClass().getResource("UserDao/select(ID).sql"))
			.where(Condition.of("Uzer.id").eq(id))
			.build()
			.connect(getLink())
			.fetchEntity(User.class)
			.orElseThrow(NotFoundException::new);
	}


	public void insert(User value) throws ConstraintViolationException
	{
		Insert.into("Uzer")
			.set("active", value.getActive())
			.set("username", value.getUsername())
			.set("password", value.getPassword())
			.set("name", value.getName())
			.set("email", value.getEmail())
			.set("Role$id", value.getRole().getId())
			.set("description", value.getDescription())
			.set("cellPhone", value.getCellPhone())
			.set("phone", value.getPhone())
			.set("photo", value.getPhoto())
			.set("birthdate", value.getBirthdate())
			.set("CPF", value.getCPF())
			.set("sex", value.getSex())
			.set("registration", value.getRegistration())
			.set("code", value.getCode())
			.build()
			.connect(getLink())
			.fetchGeneratedKey(ID.class)
			.ifPresent(value::setId);
	}

	public void update(User value) throws AppException
	{
		if (Update.table("Uzer")
			.set("active", value.getActive())
			.set("username", value.getUsername())
			.set("password", value.getPassword())
			.set("name", value.getName())
			.set("email", value.getEmail())
			.set("Role$id", value.getRole().getId())
			.set("description", value.getDescription())
			.set("cellPhone", value.getCellPhone())
			.set("phone", value.getPhone())
			.set("photo", value.getPhoto())
			.set("birthdate", value.getBirthdate())
			.set("CPF", value.getCPF())
			.set("sex", value.getSex())
			.set("registration", value.getRegistration())
			.set("code", value.getCode())
			.where(Condition.of("id").eq(value.getId()))
			.build()
			.connect(getLink())
			.execute() == 0)
			throw new NotFoundException();
	}

	public void delete(User value) throws AppException
	{
		if (Delete.from("Uzer")
			.where(Condition.of("id").eq(value.getId()))
			.build()
			.connect(getLink())
			.execute() == 0)
			throw new NotFoundException();
	}
}